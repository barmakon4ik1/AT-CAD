"""
–§–∞–π–ª: at_run_dialog_window.py
–ü—É—Ç—å: windows/at_run_dialog_window.py

–û–ø–∏—Å–∞–Ω–∏–µ:
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ AT-CAD.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
—Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–∏ –∏–∑ CONTENT_REGISTRY –∏ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ locales.at_localization.
"""

import wx
import logging
import importlib
from typing import Union, List, Tuple
from windows.at_content_registry import CONTENT_REGISTRY, run_build

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,  # üëà —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)


def load_content(content_name: str, parent: wx.Window) -> Union[List[Tuple[str, str]], wx.Window, None]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏.

    Args:
        content_name: –ò–º—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'content_apps', 'cone' –∏–ª–∏ 'get_content_menu').
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (–æ–±—ã—á–Ω–æ content_panel).

    Returns:
        Union[List[Tuple[str, str]], wx.Window, None]:
            - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –º–µ–Ω—é (–µ—Å–ª–∏ content_name == "get_content_menu"),
            - –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (wx.Window),
            - None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    logging.info(f"[at_run_dialog_window] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {content_name}")

    if content_name == "get_content_menu":
        result = [(name, info.get("label", name)) for name, info in CONTENT_REGISTRY.items()]
        logging.info(f"[at_run_dialog_window] –í–æ–∑–≤—Ä–∞—â—ë–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º: {result}")
        return result

    content_info = CONTENT_REGISTRY.get(content_name)
    if not content_info:
        logging.error(f"[at_run_dialog_window] –ö–æ–Ω—Ç–µ–Ω—Ç {content_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CONTENT_REGISTRY")
        return None

    try:
        module = importlib.import_module(content_info.get("module", ""))
        create_window = getattr(module, "create_window")
        panel = create_window(parent)

        # üîë –ù–∞–∑–Ω–∞—á–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π callback –Ω–∞ submit (–µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
        if hasattr(panel, "on_submit_callback"):
            panel.on_submit_callback = lambda data, name=content_name: run_build(name, data)
            logging.info(f"[at_run_dialog_window] –ù–∞–∑–Ω–∞—á–µ–Ω on_submit_callback –¥–ª—è {content_name}")

        logging.info(f"[at_run_dialog_window] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç {content_name}, "
                     f"—Ç–∏–ø: {panel.__class__.__name__}")
        return panel

    except Exception as e:
        logging.exception(f"[at_run_dialog_window] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {content_name}: {e}")
        return None


def at_load_content(content_name: str, parent: wx.Window) -> wx.Window | None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    Args:
        content_name: –ò–º—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç.

    Returns:
        wx.Window | None: –ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    return load_content(content_name, parent)
